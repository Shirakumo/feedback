<article class="entry edit" lquery="(data :id _id :project project :track track)">
  <c:h>(template-file "entry-self.ctml" :feedback))</c:h>
  <c:using value="entry">
    <form class="wide" method="post" @action="feedback/api/feedback/entry/edit">
      <input type="hidden" name="browser" value="true" />
      <input type="hidden" name="in-detail" value="true" />
      <input type="hidden" name="entry" lquery="(val _id)" />
      <section>
        <div class="row">
          <label>Time:</label>
          <time class="short time" lquery="(time time)"></time>
        </div>
        <div class="row">
          <label>Track:</label>
          <span class="short track" lquery="(text (when track (clip (feedback::ensure-track *) :name)))"></span>
        </div>
        <div class="row">
          <label>Tags:</label>
          <div class="tags" iterate="(feedback::list-tags *)">
            <span class="tag" lquery="(data :color (feedback::print-color color)) (text name)"></span>
          </div>
        </div>
        <div class="row">
          <label>Status:</label>
          <select class="status" name="status" lquery="(select status) (add-class (feedback::id->status status))">
            <option value="0">New</option>
            <option value="1">Triaged</option>
            <option value="2">Resolved</option>
            <option value="3">Wontfix</option>
            <option value="4">Invalid</option>
            <option value="5">Duplicate</option>
            <option value="6">Unclear</option>
            <option value="7">Deleted</option>
          </select>
        </div>
        <div class="row">
          <label>Severity:</label>
          <select class="severity" name="severity" lquery="(select severity) (data :severity severity)">
            <option value="0"></option>
            <option value="1">Irrelevant</option>
            <option value="10">Nice To Have</option>
            <option value="30">Low</option>
            <option value="50">Medium</option>
            <option value="80">High</option>
            <option value="100">Critical</option>
          </select>
        </div>
        <div class="row">
          <label>Version:</label>
          <input type="text" class="version" name="version" lquery="(val version)" />
        </div>
        <div class="row">
          <label>Reporter:</label>
          <input type="text" class="reporter user" list="members" name="user-id" lquery="(val user-id)" />
        </div>
        <div class="row">
          <label>Assigned:</label>
          <input type="text" class="assigned user" list="members" name="assigned-to" lquery="(val (when assigned-to (user:username assigned-to)))" />
        </div>
        <c:when test="relates-to">
          <div class="row">
            <label>Relates To:</label>
            <input type="text" class="relates-to" name="relates-to" lquery="(val relates-to)" />
          </div>
        </c:when>
        <c:when test="(< 0 os-type)">
          <div class="row os">
            <label>OS:</label>
            <span class="short" lquery="(text (feedback::id->os-type os-type))"></span>
            <input type="checkbox" class="expand" title="Expand long log" />
            <pre class="long extra os" lquery="(text os-info)"></pre>
          </div>
        </c:when>
        <c:when test="(< 0 cpu-type)">
          <div class="row cpu">
            <label>CPU:</label>
            <span class="short" lquery="(text (feedback::id->cpu-type cpu-type))"></span>
            <input type="checkbox" class="expand" title="Expand long log" />
            <pre class="long extra cpu" lquery="(text cpu-info)"></pre>
          </div>
        </c:when>
        <c:when test="(< 0 gpu-type)">
          <div class="row gpu">
            <label>GPU:</label>
            <span class="short" lquery="(text (feedback::id->gpu-type gpu-type))"></span>
            <input type="checkbox" class="expand" title="Expand long log" />
            <pre class="long extra gpu" lquery="(text gpu-info)"></pre>
          </div>
        </c:when>
        <div class="row">
          <label>Description:</label>
          <textarea class="description" name="description" placeholder="Description..." lquery="(text description)"></textarea>
        </div>
      </section>
    </form>
    
    <section>
      <header>
        <h3><i class="fa-solid fa-paperclip"></i> Attachments</h3>
        <nav>
        </nav>
      </header>
      <div class="attachments" iterate="(** :attachments)">
        <form class="attachment existing" method="post" enctype="multipart/form-data" @action="feedback/api/feedback/entry/edit">
          <span class="collapse"><i class="fa-solid fa-chevron-up"></i></span>
          <input type="hidden" name="browser" value="true" />
          <input type="hidden" name="in-detail" value="true" />
          <input type="hidden" name="entry" lquery="(val (** :_id))" />
          <i class="fa-solid fa-fw" lquery="(add-class (feedback::attachment-type-icon type))"></i>
          <c:let url="(feedback::attachment-url ** *)" path="(feedback::attachment-pathname ** *)" name="name">
            <c:if test="(probe-file path)">
              <c:then>
                <a class="name" lquery="(text name) (attr :href url)"></a>
                <input type="file" lquery="(attr :name name)" required />
                <input type="submit" value="Upload" />
                <c:case value="(feedback::attachment-type-kind (** :type))">
                  <v values=":image">
                    <img class="preview collapsed" alt="image" lquery="(attr :src url)"/>
                  </v>
                  <v values=":audio">
                    <audio class="preview collapsed" controls lquery="(attr :src url)"></audio>
                  </v>
                  <v values=":video">
                    <video class="preview collapsed" controls lquery="(attr :src url)"></video>
                  </v>
                  <v values=":text">
                    <div class="preview log collapsed" lquery="(text (alexandria:read-file-into-string path))"></div>
                  </v>
                  <v values=":code">
                    <code class="preview log collapsed" lquery="(text (alexandria:read-file-into-string path))"></code>
                  </v>
                </c:case>
              </c:then>
              <c:else>
                <span class="name" lquery="(text name)"></span>
                <input type="file" lquery="(attr :name name)" required />
                <input type="submit" value="Upload" />
              </c:else>
            </c:if>
          </c:let>
        </form>
      </div>
    </section>
    <section>
      <header>
        <h3><i class="fas fa-comment"></i> Notes</h3>
      </header>
      <div class="notes">
        <c:splice iterate="(feedback::list-notes *)">
          <form class="note existing" @action="feedback/api/feedback/note/edit" lquery="(attr :id (feedback::note-tag *))">
            <input type="hidden" name="browser" value="true" />
            <input type="hidden" name="in-detail" value="true" />
            <input type="hidden" name="note" lquery="(val _id)" />
            <time class="time" lquery="(time time)">2023.01.25 13:28:12</time>
            <div>
              <a class="author user" lquery='(text (user:username author))' @href="feedback/user/{0} (user:username author)">
                <img src="#" class="avatar" lquery="(attr :src (profile:avatar author 32))" /></a>
            </div>
            <textarea class="text" name="text" lquery="(text text)"></textarea>
            <p class="text" name="text" lquery="(html (feedback::render-comment text))"></p>
          </form>
        </c:splice>
        <c:when test="(feedback::accessible-p * :edit)">
          <form class="note new" method="post" @action="feedback/api/feedback/note/new">
            <input type="hidden" name="browser" value="true" />
            <input type="hidden" name="in-detail" value="true" />
            <input type="hidden" name="entry" lquery="(val _id)" />
            <time class="time now" lquery="(time (get-universal-time))">2023.01.25 13:28:12</time>
            <div>
              <a class="author user" lquery='(text (user:username (feedback::author)))' @href="feedback/user/{0} (user:username (feedback::author))">
                <img src="#" class="avatar" lquery="(attr :src (profile:avatar (feedback::author) 32))" /></a>
            </div>
            <textarea class="text" name="text" placeholder="Note..." required></textarea>
            <input type="submit" value="Submit">
          </form>
        </c:when>
      </div>
    </section>
    <section>
      <header>
        <h3><i class="fa-solid fa-code-pull-request"></i> Relations</h3>
      </header>
      <ul class="relations">
        <c:when test="relates-to">
          <li class="parent" lquery="(add-class (feedback::id->status status))">
            <i class="fa-solid" lquery='(add-class (if (eql :duplicate (feedback::id->status status)) "fa-code-merge" "fa-code-pull-request"))'></i>
            <a lquery="(attr :href (feedback::entry-url relates-to)) (text (feedback::id-code relates-to))">$1342</a> is
            the parent by <span lquery="(text user-id)"></span>
          </li>
        </c:when>
        <c:splice iterate="(feedback::list-related *)">
          <li lquery="(add-class (feedback::id->status status))">
            <i class="fa-solid" lquery='(add-class (if (eql :duplicate (feedback::id->status status)) "fa-code-merge" "fa-code-pull-request"))'></i>
            <a lquery="(attr :href (feedback::entry-url *)) (text (feedback::id-code *))">$1342</a> is
            <c:s>(if (eql :duplicate (feedback::id->status status)) "a duplicate" "related")</c:s>
            by <span lquery="(text user-id)"></span>
          </li>
        </c:splice>
      </ul>
    </section>
    <section>
      <header>
        <h3><i class="fas fa-clock-rotate-left"></i> Changes</h3>
      </header>
      <div class="changelog">
        <c:splice iterate="(reverse (** :changelog))">
          <c:splice lquery="(html (plump:clone-node (*** :change-content) T))"/>
        </c:splice>
        <c:unless test="(** :changelog)">
          <div class="empty">There are no changes to show</div>
        </c:unless>
      </div>
    </section>
    <datalist id="members" iterate="(feedback::list-members project)">
      <option lquery="(val (user:username *))" />
    </datalist>
  </c:using>
</article>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/monokai-sublime.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/xml.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/ini.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/json.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/yaml.min.js"></script>
